{"version":3,"file":"camembert-lazy-injectable.decorator.js","sourceRoot":"","sources":["../../../src/lib/decorators/camembert-lazy-injectable.decorator.ts"],"names":[],"mappings":"AAAA,OAAO,kBAAkB,CAAC;AAC1B,OAAO,EAAC,SAAS,EAAC,MAAM,WAAW,CAAC;AACpC,OAAO,aAAa,MAAM,6BAA6B,CAAC;AAGxD,MAAM,CAAC,MAAM,8BAA8B,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC;AAE5E;;;;;;GAMG;AACH,MAAM,UAAU,uBAAuB;IACrC,OAAO,CAAC,MAAW,EAAE,EAAE;QACrB,IAAI,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;QAChC,IAAI,EAAE,UAAU,EAAE,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;QAE9C,UAAU,CAAC,MAAM,CAAC,CAAC;QAEnB,MAAM,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,8BAA8B,EAAE,uBAAuB,CAAC,IAAI,EAAE,CAAC;QAEnG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAErB,OAAO,CAAC,cAAc,CAAC,8BAA8B,EAAE,OAAO,EAAE,uBAAuB,CAAC,CAAC;IAE3F,CAAC,CAAA;AACH,CAAC","sourcesContent":["import \"reflect-metadata\";\nimport {Container} from 'inversify';\nimport getDecorators from \"inversify-inject-decorators\";\n\n\nexport const CamembertInjectableMetadataKey = Symbol('CamembertInjectable');\n\n/**\n * Camembert injectable decorator\n *\n * Use this decorator with all non controllers classes you want to be injectable in lazy mode\n * @returns {(target:Object)=>undefined}\n * @constructor\n */\nexport function CamembertLazyInjectable() {\n  return (target: any) => {\n    let container = new Container();\n    let { lazyInject } = getDecorators(container);\n\n    lazyInject(target);\n\n    const targets = Reflect.getMetadata(CamembertInjectableMetadataKey, CamembertLazyInjectable) || [];\n\n    targets.push(target);\n\n    Reflect.defineMetadata(CamembertInjectableMetadataKey, targets, CamembertLazyInjectable);\n\n  }\n}\n"]}