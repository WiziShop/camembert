{"version":3,"file":"camembert-injectable.decorator.js","sourceRoot":"","sources":["../../../src/lib/decorators/camembert-injectable.decorator.ts"],"names":[],"mappings":"AAAA,OAAO,kBAAkB,CAAC;AAC1B,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AAGrC,MAAM,CAAC,MAAM,8BAA8B,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC;AAE5E;;;;;;GAMG;AACH,MAAM,UAAU,mBAAmB;IACjC,OAAO,CAAC,MAAW,EAAE,EAAE;QAErB,UAAU,EAAE,CAAC,MAAM,CAAC,CAAC;QAErB,MAAM,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,8BAA8B,EAAE,mBAAmB,CAAC,IAAI,EAAE,CAAC;QAE/F,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAErB,OAAO,CAAC,cAAc,CAAC,8BAA8B,EAAE,OAAO,EAAE,mBAAmB,CAAC,CAAC;IAEvF,CAAC,CAAA;AACH,CAAC","sourcesContent":["import \"reflect-metadata\";\nimport {injectable} from 'inversify';\n\n\nexport const CamembertInjectableMetadataKey = Symbol('CamembertInjectable');\n\n/**\n * Camembert injectable decorator\n *\n * Use this decorator with all non controllers classes you want to be injectable\n * @returns {(target:Object)=>undefined}\n * @constructor\n */\nexport function CamembertInjectable() {\n  return (target: any) => {\n\n    injectable()(target);\n\n    const targets = Reflect.getMetadata(CamembertInjectableMetadataKey, CamembertInjectable) || [];\n\n    targets.push(target);\n\n    Reflect.defineMetadata(CamembertInjectableMetadataKey, targets, CamembertInjectable);\n\n  }\n}\n"]}