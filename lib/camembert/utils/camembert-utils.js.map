{"version":3,"file":"camembert-utils.js","sourceRoot":"","sources":["../../../src/lib/utils/camembert-utils.ts"],"names":[],"mappings":"AAEA,MAAM,OAAO,cAAc;IAEzB;;;;;;OAMG;IACH,MAAM,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,MAAM;QAElD,MAAM,WAAW,GAAmC,EAAE,CAAC;QAEvD,MAAM,cAAc,GAAG,kCAAkC,CAAC;QAC1D,MAAM,cAAc,GAAG,YAAY,CAAC;QAEpC,SAAS,aAAa,CAAC,IAAI;YACzB,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;YAC1D,IAAI,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAC3F,IAAI,MAAM,KAAK,IAAI;gBACjB,MAAM,GAAG,EAAE,CAAC;YACd,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,MAAM,UAAU,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;QACzC,MAAM,cAAc,GAAG,OAAO,CAAC,WAAW,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;QAEjG,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;gBACpC,WAAW,CAAC,IAAI,CAAC;oBACf,IAAI,EAAE,SAAS;oBACf,IAAI,EAAE,cAAc,CAAC,CAAC,CAAC;iBACxB,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;QAGH,OAAO,WAAW,CAAC;IACrB,CAAC;CACF","sourcesContent":["import { CamembertRouteRouteParameter } from \"../interfaces/camembert-route-route-parameter.interface.js\";\n\nexport class CamembertUtils {\n\n  /**\n   * Retrieve route parameters\n   *\n   * @param ControllerInstance\n   * @param method\n   * @returns {CamembertRouteRouteParameter[]}\n   */\n  static getRouteParameters(ControllerInstance, method): CamembertRouteRouteParameter[] {\n\n    const routeParams: CamembertRouteRouteParameter[] = [];\n\n    const STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n    const ARGUMENT_NAMES = /([^\\s,]+)/g;\n\n    function getParamNames(func) {\n      const fnStr = func.toString().replace(STRIP_COMMENTS, '');\n      let result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n      if (result === null)\n        result = [];\n      return result;\n    }\n\n    const parameters = getParamNames(method);\n    const parameterTypes = Reflect.getMetadata('design:paramtypes', ControllerInstance, method.name);\n\n    parameters.forEach((parameter, i) => {\n      if (parameterTypes.hasOwnProperty(i)) {\n        routeParams.push({\n          name: parameter,\n          type: parameterTypes[i]\n        });\n      }\n    });\n\n\n    return routeParams;\n  }\n}\n"]}