{"version":3,"file":"camembert-route.middleware.js","sourceRoot":"","sources":["../../../src/lib/middlewares/camembert-route.middleware.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH,MAAM,UAAU,wBAAwB,CAAC,kBAAkB,EAAE,MAAM,EAAE,WAAW;IAC9E,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;QAExB,MAAM,YAAY,GAAU,EAAE,CAAC;QAE/B,KAAK,IAAI,WAAW,IAAI,WAAW,EAAE;YACnC,IAAI,WAAW,CAAC,IAAI,KAAK,KAAK,EAAE;gBAC9B,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACvB,SAAS;aACV;YACD,IAAI,WAAW,CAAC,IAAI,KAAK,KAAK,EAAE;gBAC9B,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACvB,SAAS;aACV;YACD,IAAI,WAAW,CAAC,IAAI,KAAK,MAAM,EAAE;gBAC/B,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACxB,SAAS;aACV;YAED,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;gBAC7D,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;gBAChD,SAAS;aACV;YAED,IAAI,OAAO,WAAW,CAAC,IAAI,KAAK,UAAU,EAAE;gBAC1C,IAAI,QAAQ,GAAG,IAAI,WAAW,CAAC,IAAI,EAAE,CAAC;gBAEtC,KAAK,IAAI,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;oBAC1C,IAAI,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;wBACrC,QAAQ,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;qBACzC;iBACF;gBACD,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC5B,SAAS;aACV;YAED,MAAM,aAAa,WAAW,CAAC,IAAI,oBAAoB,CAAC;SACzD;QAED,MAAM,CAAC,KAAK,CAAC,kBAAkB,EAAE,YAAY,CAAC,CAAC;IACjD,CAAC,CAAA;AAEH,CAAC","sourcesContent":["/**\n * Camembert route middleware which will executed\n * before your controller middleware to inject the right parameters.\n *\n * Parameters will be injected by their names (except for the form parameter, which is injected by its type)\n *\n * There are 3 types of parameters:\n * - The express one: req, res, next\n * - The request parameters\n * - A form instance\n *\n * Example:\n * @CamembertRoute(\"GET\", \"/:id\")\n * myMethod(res, id: number, next, form: MyForm) {}\n *\n * - res: will be the express response\n * - id: will be the res.params.id\n * - next: will be the express next method\n * - form: will be populated with a MyForm instance and its members will be get from the body request\n *\n *\n * @param controllerInstance\n * @param method\n * @param routeParams\n * @returns {(req:any, res:any, next:any)=>undefined}\n * @constructor\n */\nexport function CamembertRouteMiddleware(controllerInstance, method, routeParams) {\n  return (req, res, next) => {\n\n    const actionParams: any[] = [];\n\n    for (let routerParam of routeParams) {\n      if (routerParam.name === 'req') {\n        actionParams.push(req);\n        continue;\n      }\n      if (routerParam.name === 'res') {\n        actionParams.push(res);\n        continue;\n      }\n      if (routerParam.name === 'next') {\n        actionParams.push(next);\n        continue;\n      }\n\n      if (req.params && req.params.hasOwnProperty(routerParam.name)) {\n        actionParams.push(req.params[routerParam.name]);\n        continue;\n      }\n\n      if (typeof routerParam.type === 'function') {\n        let formInst = new routerParam.type();\n\n        for (let property of Object.keys(formInst)) {\n          if (req.body.hasOwnProperty(property)) {\n            formInst[property] = req.body[property];\n          }\n        }\n        actionParams.push(formInst);\n        continue;\n      }\n\n      throw `Parameter ${routerParam.name} is not injectable`;\n    }\n\n    method.apply(controllerInstance, actionParams);\n  }\n\n}\n\n"]}