{"version":3,"file":"camembert.js","sourceRoot":"","sources":["../../src/lib/camembert.ts"],"names":[],"mappings":"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","sourcesContent":["import \"reflect-metadata\";\nimport * as http from 'http';\nimport {\n  CamembertInjectable,\n  CamembertInjectableMetadataKey\n} from \"./decorators/camembert-injectable.decorator.js\";\n\nimport {CamembertEnvironment} from \"./interfaces/camembert-environment.interface.js\";\nimport {CamembertControllerMetadataKey, CamembertController} from \"./decorators/camembert-controller.decorator.js\";\nimport {CamembertRouteKey} from \"./decorators/camembert-route.decorator.js\";\nimport {CamembertRouteMiddleware} from \"./middlewares/camembert-route.middleware.js\";\nimport {CamembertFormKey} from \"./decorators/camembert-form.decorator.js\";\nimport express from \"express\";\nimport { CamembertRouteConfig } from \"./interfaces/camembert-route-config.interface.js\";\nimport { CamembertContainer } from \"./utils/camembert-container.js\";\nimport { CamembertUtils } from \"./utils/camembert-utils.js\";\nimport { CamembertRouting } from \"./interfaces/camembert-routing.interface.js\";\n\nimport { createRequire } from 'module';\nconst require = createRequire(import.meta.url);\nconst G = require('glob');\n\n/**\n * The Camembert core class\n */\nexport class Camembert {\n  private started = false;\n\n  private route_imported = false;\n\n  private routes: CamembertRouting[] = [];\n\n  private container: CamembertContainer;\n\n  private app: express.Application;\n\n  private routeConfigs: CamembertRouteConfig[] = [];\n\n  /**\n   *\n   * @param environment\n   * @param run\n   */\n  private constructor(private environment: CamembertEnvironment,\n                      run?: (app: express.Application, routes: CamembertRouting[], container: CamembertContainer)=>void) {\n\n    this.importControllers().then(() => {\n      this.setContainer();\n\n      this.setRouting();\n\n      this.app = express();\n\n      if (run && typeof run === 'function') {\n        run(this.app, this.routes, this.container);\n      }\n\n      this.route_imported = true;\n    });\n  }\n\n  /**\n   * Configure Camembert before start the serve\n   *\n   * @param environment The Camembert's configuration\n   * @param run Function which will be executed to allow you to configure the app the way you want before start the server\n   * @returns {Camembert}\n   */\n  static async configure(environment: CamembertEnvironment,\n                   run?: (app: express.Application, routes: CamembertRouting[], container: CamembertContainer)=>void): Promise<Camembert> {\n    const camembert = new this(environment, run);\n\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        if (camembert.route_imported) {\n          resolve(camembert);\n        }\n      }, 100);\n    });\n  }\n\n  /**\n   * Start the server\n   *\n   * @param onListening Function to execute on the \"listening\" HTTP server event. If none a default function will be executed\n   * @param onError Function to execute on the \"error\" HTTP server event. If none a default function will be executed\n   */\n  start(onListening?: (server: http.Server)=>void, onError?: (server: http.Server, error: any)=>void) {\n    if (this.started) {\n      throw 'Server already started';\n    }\n\n    const server = http.createServer(this.app);\n\n    server.listen(this.environment.port);\n\n    this.started = true;\n\n    server.on('listening', () => {\n      if (onListening && typeof onListening === 'function') {\n        onListening(server);\n      } else {\n        this.onListening(server);\n      }\n\n      this.dumpRoutes(this.app);\n    });\n\n    server.on('error', (error) => {\n      if (onError && typeof onError === 'function') {\n        onError(server, error);\n      } else {\n        this.onError(error);\n      }\n    });\n  }\n\n  /**\n   * Import the controllers to the app\n   */\n  private async importControllers() {\n\n    return new Promise((resolve) => {\n      const fileImport = [];\n      this.environment.controllersPath.forEach(controllerPath => {\n        G.sync(controllerPath).forEach(async file => {\n          if (file.split('.').pop() === 'js') {\n            fileImport.push(import(file));\n          }\n        })\n      });\n      Promise.all(fileImport).then(() => {\n        resolve(true);\n      });\n    });\n\n  }\n\n\n  /**\n   * Create the DI container\n   *\n   */\n  private setContainer() {\n    this.container = new CamembertContainer();\n\n    this.container.bind(CamembertContainer).toConstantValue(this.container);\n\n    const targets = Reflect.getMetadata(CamembertInjectableMetadataKey, CamembertInjectable);\n    targets.forEach(target => {\n      this.container.bind(target).toSelf().inSingletonScope();\n    });\n  }\n\n  /**\n   * Set routing\n   */\n  private setRouting() {\n    const controllers = Reflect.getMetadata(CamembertControllerMetadataKey, CamembertController);\n\n    controllers.forEach(controller => {\n\n      this.extractRoutesFromCamembertController(controller);\n    });\n  }\n\n\n  /**\n   * Retrieve all routes for a controller and populate the routes array\n   *\n   * @param controller\n   */\n  private extractRoutesFromCamembertController(controller: Function) {\n\n\n    for (const actionName of Object.getOwnPropertyNames(controller.prototype)) {\n      const action = controller.prototype[actionName];\n\n      if (typeof action !== 'function') {\n        continue;\n      }\n\n      const route: CamembertRouteConfig = Reflect.getMetadata(CamembertRouteKey, action);\n\n      if (!route) {\n        continue;\n      }\n\n      route.path = (Reflect.getMetadata(CamembertControllerMetadataKey, controller) || \"\") + route.path;\n\n      this.routeConfigs.push(route);\n\n      const controllerInstance = this.container.get(route.controller.constructor);\n\n      const routeParams = CamembertUtils.getRouteParameters(controllerInstance, route.action);\n\n\n      const middleware: Function[] = route.beforeMiddleware ? route.beforeMiddleware : [];\n\n      for (const routerParam of routeParams) {\n        if (typeof routerParam.type === 'function') {\n\n          const formValidator = Reflect.getMetadata(CamembertFormKey, routerParam.type);\n\n          if (formValidator) {\n\n            middleware.push((req, res, next) => {\n\n              const formInst = new routerParam.type();\n\n              for (const property of Object.keys(formInst)) {\n                if (req.body.hasOwnProperty(property)) {\n                  formInst[property] = req.body[property];\n                }\n              }\n              formValidator(req, res, next, formInst);\n            });\n          }\n        }\n      }\n\n\n      middleware.push(CamembertRouteMiddleware(controllerInstance, route.action, routeParams));\n\n      route.afterMiddleware.forEach(m => {\n        middleware.push(m);\n      });\n\n      this.routes.push(\n        {\n          path: route.path,\n          httpMethod: route.httpMethod,\n          middleware: middleware,\n        }\n      );\n    }\n  }\n\n  /**\n   * Event listener for HTTP server \"error\" event\n   *\n   * @param error\n   */\n  private onError(error: any) {\n    if (error.syscall !== 'listen') {\n      throw error;\n    }\n\n    switch (error.code) {\n      case 'EACCES':\n        console.error(`Port ${this.environment.port} requires elevated privileges`);\n        process.exit(1);\n      case 'EADDRINUSE':\n        console.error(`Port ${this.environment.port} is already in use`);\n        process.exit(1);\n      default:\n        throw error;\n    }\n  }\n\n  /**\n   * Event listener for HTTP server \"listening\" event.\n   */\n  private onListening(server: http.Server) {\n\n    const addr = server.address();\n\n    const bind = typeof addr === 'string'\n      ? 'pipe ' + addr\n      : 'port ' + addr.port;\n\n    console.log('Server started on ' + bind);\n  }\n\n\n  /**\n   * Dump the routes into the console\n   *\n   * @param app\n   */\n  private dumpRoutes(app: express.Application) {\n    if(this.environment.verbose !== false) {\n      console.log(`------ ROUTES ------`);\n    }\n    app._router.stack.forEach(entry => {\n\n      if (entry.route) {\n        const route = entry.route;\n        Object.keys(route.methods)\n          .filter((method) => {\n            return !!route.methods[method]\n          })\n          .map((method) => {\n            let r = method.toUpperCase() + ' ' + route.path;\n\n            this.routeConfigs.forEach((route: CamembertRouteConfig) => {\n              const paramNames: string[] = [];\n              const controllerInstance = this.container.get(route.controller.constructor);\n              const routeParams = CamembertUtils.getRouteParameters(controllerInstance, route.action);\n              for (const param of routeParams) {\n                paramNames.push(param.name + ':' + param.type.name);\n              }\n\n\n              if (r === route.httpMethod.toUpperCase() + ' ' + route.path) {\n                r += ' → ' + route.controller.constructor.name + '::' + route.action.name + '(' + paramNames.join(', ') + ')';\n              }\n            });\n\n            if(this.environment.verbose !== false) {\n              console.log(r);\n            }\n          })\n      }\n    });\n\n    if(this.environment.verbose !== false) {\n      console.log(`------ ${this.routeConfigs.length} routes found ------`);\n    }\n  }\n\n}\n"]}